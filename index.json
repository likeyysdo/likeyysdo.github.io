[{"categories":["PostgreSQL","DB"],"content":"PostgreSQL Foreign Table 简介 PostgreSQL Foreign Table 外部表支持从自身数据以外的数据源获取数据，例如文件、其他数据库。常见的有oracle_fdw,mysql_fdw,file_fdw。本文是使用tds_fdw插件转发了Microsoft SQL Server数据库中的数据，提供了只读访问权限，PostgresSQL此次部署在Windows Server平台。 官网介绍 PostgreSQL: Documentation: 9.3: Foreign Data ","date":"2021-10-10","objectID":"/posts/postgresql-tds-transfer-access-mssql/:0:1","tags":["PostgreSQL","MSSQL"],"title":"PostgreSQL利用Foreign Table通过tds_fdw插件访问Microsoft SQL Server数据库表数据","uri":"/posts/postgresql-tds-transfer-access-mssql/"},{"categories":["PostgreSQL","DB"],"content":"环境准备 本次PostgreSQL与Microsoft SQL Server部署在同一台服务器上 PostgreSQL版本为 PostgreSQL 12.8, compiled by Visual C++ build 1914, 64-bit 端口 5432 Microsoft SQL Server版本为 Microsoft SQL Server 2016 (RTM) - 13.0.1601.5 (X64) Apr 29 2016 23:23:58 Copyright (c) Microsoft Corporation Developer Edition (64-bit) on Windows 10 Enterprise LTSC 2019 6.3 \u003cX64\u003e (Build 17763: ) (Hypervisor) 端口 1433 ","date":"2021-10-10","objectID":"/posts/postgresql-tds-transfer-access-mssql/:0:2","tags":["PostgreSQL","MSSQL"],"title":"PostgreSQL利用Foreign Table通过tds_fdw插件访问Microsoft SQL Server数据库表数据","uri":"/posts/postgresql-tds-transfer-access-mssql/"},{"categories":["PostgreSQL","DB"],"content":"tds_fdw 插件介绍与安装 GitHub地址 TDS Foreign data wrapper 作者提供了PostgreSQL通过Tabular Data Stream (TDS)协议访问Sybase databases 和 Microsoft SQL Server插件，不过根据作者介绍，现版本还不支持写入(经过测试确实如此)以及不支持下推 且作者只提供了Linux和MacOS平台下的编译方式，没有提供Windows平台的，某个issue也提出了这个问题，有人帮忙打包好了对应版本的DLL文件： Installation on Windows · Issue #53 · tds-fdw/tds_fdw · GitHub 其中可以找到PostgreSQL 11 和 12 版本对应的编译后的文件， tds_fdw-pg_edb_11_winx64.zip tds_fdw-pg_edb_12_winx64.zip 编译后的文件中有三个文件夹bin，lib 和 share, 对应了PostgreSQL安装路径下的三个文件夹，将其复制进去即可。 具体方式及明细参见 issuecomment-604196621 ","date":"2021-10-10","objectID":"/posts/postgresql-tds-transfer-access-mssql/:0:3","tags":["PostgreSQL","MSSQL"],"title":"PostgreSQL利用Foreign Table通过tds_fdw插件访问Microsoft SQL Server数据库表数据","uri":"/posts/postgresql-tds-transfer-access-mssql/"},{"categories":["PostgreSQL","DB"],"content":"PostgreSQL 配置 因为是新安装的PostgreSQL，所以需要配置一下其他设置 Wiwndows下PostgreSQL配置文件位于: C:\\Program Files\\PostgreSQL\\12\\data\\postgresql.conf #允许外部IP访问 listen_addresses = '*' #端口号默认是5432 port = 5432 #缓存最大值，因为数据量较小，所以这里设置了128MB shared_buffers = 128MB ","date":"2021-10-10","objectID":"/posts/postgresql-tds-transfer-access-mssql/:0:4","tags":["PostgreSQL","MSSQL"],"title":"PostgreSQL利用Foreign Table通过tds_fdw插件访问Microsoft SQL Server数据库表数据","uri":"/posts/postgresql-tds-transfer-access-mssql/"},{"categories":["PostgreSQL","DB"],"content":"tds_fdw加载以及Foreign Table配置 在安装了对应插件文件，重启PostgreSQL服务后在SQL查询界面： -- 启用tds_fdw插件 CREATEEXTENSIONtds_fdw;-- 配置Microsoft SQL Server服务器地址 CREATESERVERnc_sqlserverFOREIGNDATAWRAPPERtds_fdwOPTIONS(servername'localhost',port'1433',DATABASE'Test',language'Simplified Chinese',character_set'UTF-8');-- 配置可以访问Microsoft SQL Server要复制的数据库的用户以及密码 CREATEUSERMAPPINGFORpostgresSERVERnc_sqlserverOPTIONS(username'sa',password'xxx');-- 将整个库链接到PostgreSQL，链接特定表的方式参照tds_fdw GitHub README IMPORTFOREIGNSCHEMAdbofromservernc_sqlserverintopublic;之后通过pgAdmin就可以看到对应库中的Foreign Tables出现了Microsoft SQL Server中的表,即可按照普通表格查询数据 ","date":"2021-10-10","objectID":"/posts/postgresql-tds-transfer-access-mssql/:0:5","tags":["PostgreSQL","MSSQL"],"title":"PostgreSQL利用Foreign Table通过tds_fdw插件访问Microsoft SQL Server数据库表数据","uri":"/posts/postgresql-tds-transfer-access-mssql/"},{"categories":["MySQL","DB"],"content":"MySQL主从复制原理 master服务器将数据的改变都记录到二进制binlog日志中，只要master上的数据发生改变，则将其改变写入二进制日志；salve服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/O Thread请求master二进制事件，同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/O Thread和SQL Thread将进入睡眠状态，等待下一次被唤醒。 具体原理参考MySQL 主从同步(1) - 概念和原理介绍 以及 主从/主主模式 部署记录 ","date":"2021-10-08","objectID":"/posts/mysql-master-slaver-switch-and-failover-configure/:0:1","tags":["MySQL"],"title":"MySQL主从复制及FailOver切换配置","uri":"/posts/mysql-master-slaver-switch-and-failover-configure/"},{"categories":["MySQL","DB"],"content":"MySQL主从复制配置 MySQL服务器信息： 主库: 系统 Win10 20H2,数据库MySQL 8.0.21,地址 172.23.64.1:3306 从库: 系统 Ubuntu20.04.1 LTS,数据库MySQL 8.0.21,地址172.23.79.79:3306 同步的数据库名 test 保证系统间端口可以互相访问 MySQL主库配置 修改MySQL服务配置文件my.ini win10下目录为‪C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini # 服务器ID，需要保证每个服务器的ID唯一 server-id=1 # 需要同步的数据库名，此处为test binlog-do-db=test # 需要忽略的数据库名，此处为mysql binlog-ignore-db=mysql # 指定binlog二进制日志同步策略 # sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。 # sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。 sync_binlog = 1 # 跳过现有的采用checksum的事件，此处需要主从服务器保持一致 binlog_checksum = none # bin-log日志文件格式，设置为MIXED可以防止主键重复 binlog_format = mixed 重启MySQL服务后，执行show master status;结果如下: +----------------------------+----------+--------------+------------------+-------------------+ |File|Position|Binlog_Do_DB|Binlog_Ignore_DB|Executed_Gtid_Set|+----------------------------+----------+--------------+------------------+-------------------+ |DESKTOP-NEON79U-bin.000496|156||||+----------------------------+----------+--------------+------------------+-------------------+ MySQL从库配置 首先同步主库表结构及数据至从库 修改MySQL服务配置文件 Ubuntu20.04中目录为:/etc/mysql/mysql.conf.d/mysqld.cnf # 服务器ID，保证唯一 server-id=2 # 要复制的数据库名 replicate-do-db=test # 要忽略的数据库名(其实上一个参数已经指定要复制的数据库名了，这一条可以不要) replicate-ignore-db=mysql # 忽略所有错误 slave-skip-errors = all # 跳过现有的采用checksum的事件，此处需要主从服务器保持一致 slave_sql_verify_checksum = none 重启服务后，进入MySQL命令行 stop slave; 关闭slave change master to master_host='172.23.64.1',master_user='user'master_password='xxxxx'; 配置主服务器信息 master_host为主服务器地址 master_user为可远程登陆的用户名 master_password为密码 在其他教程里，还指定了master_log_file为binglog文件名，就是主机执行show master status;得到的File值，如上文:DESKTOP-NEON79U-bin.000496 以及master_log_pos，主机执行show master status;得到的Position 值，如上文:156 在我的尝试中，不输入这两个值，子系统会自动配置，指定后反而会导致Last_IO_Error: Relay log write failure: could not queue event from master的错误 start slave;重启slave 之后可以输入show slave status\\G;来查看结果 mysql\u003e show slave status\\G; *************************** 1. row *************************** Slave_IO_State: Waiting for source to send event Master_Host: 172.23.64.1 Master_User: byco Master_Port: 3306 Connect_Retry: 60 Master_Log_File: DESKTOP-NEON79U-bin.000496 Read_Master_Log_Pos: 156 Relay_Log_File: ubuntubyco-relay-bin.000027 Relay_Log_Pos: 391 Relay_Master_Log_File: DESKTOP-NEON79U-bin.000496 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: test Replicate_Ignore_DB: mysql Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 156 Relay_Log_Space: 840 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0 Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 1 Master_UUID: 288897e6-dd45-11ea-86f8-00ff6eb77a84 Master_Info_File: mysql.slave_master_info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Replica has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: Master_public_key_path: Get_master_public_key: 0 Network_Namespace: 1 row in set, 1 warning (0.00 sec) 其中 Slave_IO_Running和Slave_SQL_Running值为Yes则说明主从复制已经生效 如果Slave_IO_Running=connecting，则连接出错，有可能是ip地址，防火墙的原因 Slave_IO_Running=no，我遇到的原因包括mysql配置文件中slave_sql_verify_checksum不一致，以及在子系统指定主系统链接信息时指定了master_log_file以及master_log_pos。 关于报错原因可以从上文的以下几项看到： Last_IO_Errno Last_IO_Error Last_SQL_Errno Last_SQL_Error 以及可以查询mysql配置文件下log_error配置项对应的error文件来排查问题 至此MySQL主从复制基本已经可以使用了 ","date":"2021-10-08","objectID":"/posts/mysql-master-slaver-switch-and-failover-configure/:0:2","tags":["MySQL"],"title":"MySQL主从复制及FailOver切换配置","uri":"/posts/mysql-master-slaver-switch-and-failover-configure/"},{"categories":["MySQL","DB"],"content":"FailOver切换配置 参考文档Configuring Server Failover for Connections Using JDBC 通过配置多个数据源，当jdbc无法连接第一个数据源时，会切换到第二个数据源 jdbc:mysql://[primary host][:port],[secondary host 1][:port][,[secondary host 2][:port]]...[/[database]]» [?propertyName1=propertyValue1[\u0026propertyName2=propertyValue2]...] 本文使用的示例JDBC-URL为 jdbc:mysql://172.23.64.1:3306,172.23.79.79:3306/test?useUnicode=true\u0026characterEncoding=UTF8\u0026rewriteBatchedStatements=true\u0026autoReconnect=true\u0026serverTimezone=UTC\u0026useSSL=false\u0026failOverReadOnly=false 其中与FailOver切换相关的配置项有failOverReadOnly=false 当该值为false时，切换后会将新的数据源视为可读写数据库， 若为true，则只能是只读数据库 ","date":"2021-10-08","objectID":"/posts/mysql-master-slaver-switch-and-failover-configure/:0:3","tags":["MySQL"],"title":"MySQL主从复制及FailOver切换配置","uri":"/posts/mysql-master-slaver-switch-and-failover-configure/"},{"categories":["MySQL","DB"],"content":"参考文档 MySQL 主从同步(1) - 概念和原理介绍 以及 主从/主主模式 部署记录 MySQL主从同步（复制） Linux环境下MySQL开启远程访问权限 MySQL8.0允许远程登陆 MySQL :: MySQL 8.0 Reference Manual :: 17 Replication 9.1 Configuring Server Failover for Connections Using JDBC ","date":"2021-10-08","objectID":"/posts/mysql-master-slaver-switch-and-failover-configure/:0:4","tags":["MySQL"],"title":"MySQL主从复制及FailOver切换配置","uri":"/posts/mysql-master-slaver-switch-and-failover-configure/"}]